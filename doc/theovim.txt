*theovim.txt*               Theo's Neovim Configuration
*theovim*

                                  \/       \/          ~
                                  /\_______/\          ~
                                 /   o   o   \         ~
                                (  ==  ^  ==  )        ~
                                 )           (         ~
                                (             )        ~
                                ( (  )   (  ) )        ~
                               (__(__)___(__)__)       ~
                              ___                      ~
                               | |_  _  _     o __     ~
                               | | |(/_(_)\_/ | |||    ~

================================================================================

Welcome back Theo, what did you forget this time?

- Type |gO| to see the table of contents
- Use |K| (or |CTRL-]|) to jump to the tag under cursor, |CTRL-T| to comeback
- If you see a path to another file, use |gd| to open the file
- If you see a hyperlink, use |gx| to open it in your default browser

Credits:
The settings and keymaps for Telescope are heavily inspried by Kickstart.nvim
(https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua).
Kickstart is developed by TJ DeVries, the developer of Telescope and the core
maintainer of Neovim, and I trust their decisions.
I will try to reflect changes in the mainstream Kickstart repository.

- Kickstart.nvim
  (https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua)

================================================================================
Tl;dr                                                             *theovim-tldr*

Housekeeping:
- `:checkhealth` to see if you are missing any runtime files
- Run `:Lazy sync` to update plugins
  - This also runs `:TSUpdate`
- Run `:MasonUpdate` to update LSP servers

Options:
- Spaces over tabs, but you do you and change them
- Use `<C-s>` in the insert mode to quickly fix spelling mistakes
- `zR` to close all folds and `zM` to open all folds, `zx` if fold glitches
  - `zA` to toggle folds recursively under the cursor

Keybindings:
- Telescope keybindings are prefixed by `<leader>f`
- Git keybindings are prefixed by `<leader>g`
- Keymaps for "navigating to prev/next something" are prefixed by `[` and `]`
- If you forgot a keymap, use `:WhichKey`

Netrw:
- Netrw is a decoration, use Oil.nvim to manage files

//TODO

LSP: //TODO
- Most used keybindigns and commands are:
  - `K` for hover doc
  - `:Format`
  - `gr` for the list of references
  - `<leader>rn` to rename
  - `<leader>ca` for code actions

Markup language:
- Use `:MarkdownPreviewToggle` and `:VimtexCompile`

Learning a new programming language?:
- `K` is a powerful keymap
- Use :TSInstall {language}
- Use :MasonInstall {LSP}

================================================================================
Core - Options                                            *theovim-core-options*

This portion //TODO

Tab defaults (I know this will make tab users mad):

- |'tabstop'| (how many char Vim renders <Tab> as) = 4
  - The help documentation outlines four main ways to configure tab in Vim.
    Theovim uses number 2. Tab lovers will like number 1.
- |'softtabstop'| (how many char the cursor moves with <Tab> and <BS>) = 0
  - 0 disables 'softtabstop'
- |'extandtab'| (uses spaces instead of <Tab> when on) = true
  - To insert <Tab> with with 'expandtab' on, use |i_CTRL-v| followed by <Tab>
  - To change the type of indentations in an existing file, use |:retab|
- |'shiftwidth'| (number of spaces used for indentation) = 2
- Read the below section for how <Tab> and indentation spaces are rendered

//TODO autocmds for adjusting tab
//TODO editorconfig

Character rendering:
>
  function example()
  ┊ ┊ str = "A line indented with four spaces"
  ⇥   str = "A line followed by <Tab> ('tabstop=4')"

  ┊ str = "A line followed by two trailing whitespaces"␣␣

  ┊ str = "Pretend that this line is really really really long and is wrap
    ↪ped. Notice how a wrapped line is also indented (`:h showbreak`)"

  ┊ str = "If you don't have 'showbreak' enabled, wrapped lines would look
  ↪ like this"
  end
<
Spell check:

- Spell check is enabled in markdown, TeX, and plain text buffers
- Words unrecognized by the spell checker will be underlined
- |z=| gives the suggestions for the word under the cursor
- `<C-s>` in insert mode fixes the closest error and put the cursor back
- `:set spell!` toggles spell check
- See |spell| for more information

Fold:
Folds are provided through tree-sitter.
It can 

char            action
----------------------------------------------------------------------

|za|            Toggle one fold
|zA|            Toggle all folds under the cursor recursively
|zo|            Open one fold
|zO|            Open all folds under the cursor recursively
|zc|            Close one fold
|zC|            Close all folds under the cursor recursively

|zM|            Close all folds
|zR|            Open all folds

|zx|            Update fold. Given the nature of fold as an experimental
              treesitter feature, fold might work unexpectedly. Use this
              keybinding to fix any issue

For more information:
- |folding|
- |nvim_treesitter#foldexpr()|
- |theovim-treesitter|

================================================================================
Core - User Commands                                     *theovim-core-commands*


//TODO
//
:TrimWhitespace Shows
              dads
:CD

================================================================================
Core - Autocmds                                          *theovim-core-autocmds*

//TODO
- Yank on highlight

================================================================================
Core - Keymaps                                        *theovim-core-keybindings*

Theovim overrides the following default keybindings.
They do not change the way you interact with Vim, but they are //TODO

char            action
----------------------------------------------------------------------

j               If the line at the cursor is not wrapped, perform |j|.
                If the line is wrapped, perform |gj|.
k               If the line at the cursor is not wrapped, perform |k|.
                If the line is wrapped, perform |gk|.

n               Highlight the next search result (|n|) and center the
                screen (|zz|).
N               Highlight the prev search result (|N|) and center the
                screen (|zz|).

<C-u>           Scroll up by half a page (|CTRL-U|, or by the value
                of |scroll|) and center the screen (|zz|).
<C-d>           Scroll down by half a page (|CTRL-U|, or by the value
                of |scroll|) and center the screen (|zz|).

<C-w>+          Increase the current window height by 1 (|CTRL-W_+|)
                and feed `<C-w>` again so that you can repeatedly
                type +, -, <, or > to resize the window.
                (you have to be quite rapid about the repeating key
                due to the default |'timeoutlen'|.
<C-w>-          Decrease the current window height by 1 (|CTRL-W_-|)
                and feed `<C-w>` again so that you can repeatedly
                type +, -, <, or > to resize the window.
<C-w><          Decrease the current window width by 1 (|CTRL-W_<|)
                and feed `<C-w>` again so that you can repeatedly
                type +, -, <, or > to resize the window.
<C-w><          Increase the current window width by 1 (|CTRL-W_>|)
                and feed `<C-w>` again so that you can repeatedly
                type +, -, <, or > to resize the window.

Theovim defines keybindings for frequently used actions that require more than
three keystrokes (e.g., there is no keybinding to go to a tab since
{count}|gt| is two keystrokes away).

char            action
----------------------------------------------------------------------

jk              (insert mode) ESC.
<leader>a       Select all.

<leader>/       Clear search highlight (|nohlsearch|).

<leader>y       (visual mode) Copy to the system clipboard (+).
<leader>p       List register contents (|reg|) and fill the command line
                with `normal "`.
                From there, you can type the register to paste from,
                followed by `p` to paste.
                For example, `<leader>p` followed by `+p<CR>` will
                paste the contents of register + at the cursor.
<leader>p       (visual mode) Paste the current selection without
                overriding the register.
                //TODO

<ESC>           (terminal mode) Exit insert mode in terminal buffers
<leader>z       Trigger //TODO

<C-s>           (insert mode) Fix the nearest spelling error and put
                the cursor back.

[b              Navigate to the previous buffer (|bprev|).
]b              Navigate to the next buffer (|bnext|).
<leader>b       List open buffers (|ls|) and fill the command line
                with |:b| followed by `<Space>`.
                From there, you can type bthe uffer number to navigate
                to a buffer.
                See the `<leader>k` section for how the picker works.
<leader>k       List open buffers (|ls|) and fill the command line
                with |:bdelete| followed by `<Space>`.
                From there, you can type a buffer number to create
                to a buffer.
                For example, `<leader>k` followed by `69<CR>` will
                kill buffer 69.
                Type `<CR>` without a number to kill the curr buf.

<C-h>           Navigate //TODO

<leader>t       List open buffers (|ls|) and fill the command line
                with |:tab sb| followed by `<Space>`.
                From there, you can type the buffer number to create
                a new tab with.
                See the `<leader>k` section for how the picker works.

================================================================================
Core - Netrw                                                *theovim-core-netrw*

//TODO
Netrw is a built-in file manager for Vim and Neovim.
Netrw is intended to be used for visualizing file 

char            action
----------------------------------------------------------------------

<leader>n       Toggle Netrw by calling a custom toggle function.
                The function uses `vim.g.netrw_is_open` global variable,
                meaning if you enable Netrw through other mechanism,
                it will effectively break the keybinding.

For more information:
- |netrw|

================================================================================
Plugins                                                        *theovim-plugins*

This section highlights some of the commonly used plugins.

|lazy.nvim| is a Neovim plugin manager.
- `:Lazy` opens a dashboard for all Lazy functionalities
- Alternatively, you can specify an action (e.g., `:Lazy sync`) to perform

|oil.nvim| is a file manager that lets you manage files like a Vim buffer.
- `:Oil` to open Oil in the current working directory
- Use - to navigate to the parent directory (and <CR> to `cd` into a dir)
- Rename, delete, or create files by modifying the buffer texts
- To create a directory, append "/" in the end of the name (e.g: "new_dir/")
- You can also copy or move files with |yy| and |dd|
  - Creating split windows can be helpful
- `:w` prompts for your confirmation of the changes you made

|nvim-autopairs| automatically matches parentheses, quotes, etc.

|which-key.nvim| displays a popup with possible keybindings.
The delay for WhichKey is controlled by 'timeoutlen' set in core.lua (300ms).
WhichKey also includes other features:
- ' in normal mode displays marks.
  Set a marker with |m|{char}!
- " in normal mode or `<C-r>` insert mode displays register contents
- WhichKey displays help for built-in motions such as |z| and |g|
  - You can list all one-key-stroke keybindings using `:WhichKey`
- WhichKey hijacks spell suggestions (|z=|) UI

|colorizer.lua| highlight color codes (hex codes, ANSI color name such as
"Magenta", CSS functions, etc.). Use `:ColorizerReloadAllBuffers` to reload.

|gitsigns.nvim| provides Git signs in the gutter (+, -, ~, etc.) as well as
other useful Git functionalities.
The following keybinding is enabled for Git buffers:

char            action
----------------------------------------------------------------------

<leader>gd      [G]it [D]iff current buffer.
                Calls |gitsigns.diffthis()|.

|tokyonight.nvim| is the default theme for Theovim.
Transparency is enabled for all elements, including sidebars and floats.
toggle transparency, locate `is_transparnt` variable in the `config`
function and set it to false.

|markdown-preview.nvim| offers a real-time previewer for markdown files in
your browser (`:MarkdownPreviewToggle`).

|vimtex| is a LaTeX integration for Vim, providing syntax highlights and
real-time compilation.
- You need to install and configure PDF viewer first.
  - In Linux, use Zathura (https://pwmt.org/projects/zathura/)
  - In macOS, use Skim (https://skim-app.sourceforge.io/)
  - Change the `vim.g.vimtex_view_method` in the plugins.lua
- `:VimtexCompile` starts a real-time compilation process

================================================================================
Telescope                                                    *theovim-telescope*

Telescope is a fuzzy finder for Neovim.
It allows you to find anything you want in just a few keystrokes.

Telescope works out of the box, but for faster search and live grep features,
the following dependencies are needed:
- CMake, make, and GCC or Clang to compiler |telescope-fzf-native.nvim|
- ripgrep: https://github.com/BurntSushi/ripgrep
- fd: https://github.com/sharkdp/fd

char            action
----------------------------------------------------------------------

<leader>gf      Search [G]it [F]iles.
                Calls |telescope.builtin.find_files()|.

<leader>gc      [G]it [C]ommits.
                Calls |telescope.builtin.git_commits()|.

<leader>gs      [G]it [S]tatus.
                Calls |telescope.builtin.git_status()|.

<leader>?       Find recently opened files.
                Calls |telescope.builtin.oldfiles()|.

<leader><space> Find open buffers.
                Calls |telescope.builtin.buffers()|.

<leader>ft      [F]ind [T]elescope.
                Search all Telescope built-in functions.
                Calls |telescope.builtin.builtin()|.

<leader>ff      [F]ind [F]iles.
                Search files in the current and children directories.
                Respect .gitignore if one exists.
                `fd` is not required but recommended for faster search.
                Calls |telescope.builtin.find_files()|.

<leader>fg      [F]ind by rip[G]rep.
                Search words in the files in the current and children
                directories.
                Respect .gitignore if one exists.
                `ripgrep` is required for the search.
                Calls |telescope.builtin.live_grep()|.

<leader>fh      [F]ind [H]elp.
                Calls |telescope.builtin.help_tags()|.

<leader>fd      [F]ind [D]iagnostics.
                Calls |telescope.builtin.diagnostics()|.

<leader>f/      Open fuzzy finder for the current buffer words.
                The previewer is disabled to minimize distractions.
                Calls |telescope.builtin.current_buffer_fuzzy_find()|
                with a parameter to disable the previewer
                (see |telescope.themes.get_dropdown()|).

<leader>fb      [F]ind [B]rowser.
                Calls |telescope.file-browser.finders|


Within the Telescope window, the following keybindings are available:

char            action
----------------------------------------------------------------------

<C-j>           Select the next item
<C-n>           Select the next item

<C-k>           Select the prev item
<C-p>           Select the prev item

<C-d>           Scroll the preview window down
<C-u>           Scroll the preview window up

<C-c>           Close the Telescope window

<CR>            Confirm the selection


For more information:
- |telescope.nvim|: About the fuzzy finder itself
- |telescope.builtin|: Builtin modules of Telescope
- |telescope.file-browser.nvim|: File browser extension

================================================================================
Treesitter                                                  *theovim-treesitter*

Treesitter (TS) is an incremental parser generator for more accurate syntax
highlighting compared to the default regex-based highlighting.
TS also integrates with Vim's folding and selection mechanism to provide a
more efficient navigation and editing experience.

Theovim installs the following TS servers out of the box:

- Bash
- C
- C++
- LaTeX
- Lua
- Markdown
- Python

In these filetypes, TS highlight (|nvim-treesitter-highlight-mod|), incremental
selection (|nvim-treesitter-incremental-selection-mod|), and indentation
(|nvim-treesitter-indentation-mod|) will be enabled.

To disable TS or add other parsers, use the following frequently used commands
provided by the nvim-treesitter plugin:

- :TSInstall {language} ...
- :TSUpdate {language} ...
- :TSDisable {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|
- :TSToggle {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|

The following keybindings are provided when a TS parser is enabled:

char            action
----------------------------------------------------------------------

<C-space>       Start incremental selection
<C-space>       (in visual mode) Perform node incremental selection
<C-s>           (in visual mode) Perform scope incremental selection
<M-space>       (in visual mode) Perform node decremental selection

Incremental selection example:

>
  local function treesitter-incremental-example()
    local sysname = vim.loop.os_uname().sysname
    if sysname == "Linux" then
      vim.notify("You are using Linux!")
    else
      vim.notify("Ew")
    end
  end
<

- When you start node incremental selection at the "vim" keyword (<C-space>),
  it will incrementally select:
  - "vim" -> "vim.notify" -> "vim.notify(...)" -> if statement
    -> function body -> function
- When you start scope incremental selection at the "vim" keyword
  (<C-space> to initialize then <C-s>), it will incrementally select:
  - "vim" -> if statement -> function
- You should try it out with the language of your choice to see how it behaves

For more information:
- |nvim-treesitter|: Configuration and abstract layer for the built-in TS
- |treesitter|: Neovim built-in treesitter library

================================================================================
Diagnostic                                                  *theovim-diagnostic*

Neovim has a built-in diagnostic framework to display errors or warning
messages from external tools like LSP or linters.
Unless you configure an external tool, it will most likely be from LSP.

For example, here is how diagnostic float (`<leader>e`) displays errors for the
following diastrous Lua code.
>
  H  1 local function func()     ■■ Unused local `func`.
  I  2 ┊ lowercase = ""     ■ Global variable in lowercase initial, Did you
  W  3 ┊ undefined_func(syntax, err,)     ■■■■ Undefined global `err`.
     4 end
  ╭────────────────────────────────────────────────────────────────────────╮
  │Buffer Diagnostics                                                      │
  │1. ERROR (line 3): <exp> expected. [miss-exp]                           │
  │2. INFO (line 2): Global variable in lowercase initial, Did you miss `lo│
  │↪cal` or misspell it? [lowercase-global]                                │
  │3. HINT (line 1): Unused functions. [unused-function]                   │
  │4. HINT (line 1): Unused local `func`. [unused-local]                   │
  │5. WARN (line 3): Undefined global `undefined_func`. [undefined-global] │
  │6. WARN (line 3): Undefined global `syntax`. [undefined-global]         │
  ╰────────────────────────────────────────────────────────────────────────╯
<

The following keybindings are available for buffer with diagnostic information:

char            action
----------------------------------------------------------------------

[d              Go to the previous diagnostic message
]d              Go to the next diagnostic message
<leader>e       Open floating diagnostic message in the buffer scope.
                Calls |vim.diagnostic.open_float()|.
                Custom formatting defined in the `lsp.lua` is applied.
<leader>q       Open diagnostic list in |location-list|.
                Calls |vim.diagnostic.setloclist()|.

For more information: `:h diagnostic.txt`.

================================================================================
LSP                                                                *theovim-lsp*

Following LSP servers are installed by default:
- Bash (`bashls`)
- C/C++ (`clangd`)
- LaTeX (`texlab`)
- Lua (`lua_ls`)
- Python (`pyright`)

|mason.nvim| lets you install and manage LSP servers within Neovim.
- |:Mason| opens the graphical manager for available LSP servers
- |:MasonUpdate| updates all LSP servers
- |:MasonInstall| {LSP} ... installs LSP server(s)
- |:MasonUnInstall| {LSP} ... uninstalls LSP server(s)
- There are also |:LspInstall| and |:LspUninstall| provided by
  |mason-lspconfig|, which are "more or less an alias of the :MasonInstall
  command."

When LSP server(s) is active in the buffer, it will be displayed in the
statusline: //TODO

>
   󰄛 N   nvim  doc/theovim.txt[+]  dev +60 ~2      HELP ...
<

You can also use follwing commands to control the LSP servers:
- `:LspStop` //TODO
- `:LspStop`

When LSP server(s) is active in the buffer, following are available locally:

Commands:
- `:Format`: Formats the buffer by calling |vim.lsp.buf.format()|.

Keybindings:

char            action
----------------------------------------------------------------------

<leader>F       Format the buffer (same as `:Format`).

<leader>rn      Rename the symbol (e.g., variable, function) under
                the cursor and refactor all the references.
                Calls |vim.lsp.buf.rename()|.

<leader>ca      Select a code action available under the cursor.
                the cursor and refactor the workspace.
                Calls |vim.lsp.buf.code_action()|.

K               Open a floating doc for the info of the symbol under
                the cursor.
                If hover doc is already open, jump into the hover doc.
                Calls |vim.lsp.buf.hover()|.

<C-k>           Open a floating doc for the signature of the symbol
                (e.g., function prototype) under the cursor.
                If hover doc is already open, jump into the hover doc.
                Calls |vim.lsp.buf.signature_help()|.

gd              Go to the definition of the symbol under the cursor.
                Lists all definitions if there is a multiple.
                When Telescope is available:
                - calls |telescope.builtin.lsp_definitions()|
                When Telescope is not available:
                - calls |vim.lsp.buf.definition()|

<leader>D       Go to the definition of the type of the symbol under
                the cursor.
                Lists all type definitions if there is a multiple.
                When Telescope is available:
                - calls |telescope.builtin.lsp_type_definitions()|
                When Telescope is not available:
                - calls |vim.lsp.buf.type_definition()|

gr              List references of the symbol under the cursor.
                When Telescope is available:
                - calls |telescope.builtin.lsp_references()|
                When Telescope is not available:
                - calls |vim.lsp.buf.references()|

gI              List implementations of the symbol under the cursor.
                When Telescope is available:
                - calls |telescope.builtin.lsp_implementations()|
                When Telescope is not available:
                - calls |vim.lsp.buf.implementations()|

<leader>ds      List all symbols in the current buffer.
                When Telescope is available:
                - calls |telescope.builtin.lsp_document_symbols()|
                When Telescope is not available:
                - calls |vim.lsp.buf.document_symbols()|

<leader>ws      List all symbols in the current workspace (project).
                When Telescope is available:
                - calls |telescope.builtin.lsp_workspace_symbols()|
                When Telescope is not available:
                - calls |vim.lsp.buf.workspace_symbols()|

<leader>wl      Print the workspace folders.
                Calls |vim.lsp.buf.list_workspace_folders()| with
                wrappers to unpack the table and print.


For more information:
- |lsp|: Built-in LSP framework
- |mason.nvim|: LSP server manager
- |lspconfig|: LSP configuration mechanism, provider of `:LspInfo`,
  `:LspStart`, `:LspStop`, etc.
- |mason-lspconfig.nvim|: Bridge between Mason and lspconfig, mostly a backend
  work that you do not have to worry about

================================================================================
Completion                                                  *theovim-completion*

Auto-completion is available in any buffer, and they work like any other
modern IDEs.

Available sources when an LSP server is active and snippets are provided:
- |nvim-nvim-lsp|: Keywords and variables from the LSP
- |luasnip.txt|: Snippet engine for code templates
  - |friendly-snippets-friendly-snippets| provides the snippets themselves

Available sources for all buffers:
- |cmp-buffer|: Words in the buffer
- |cmp-path|: Filesystem paths (your terminal emulator must have permission to
  your files)
- |cmp-cmdline|: Completion for Vim commands (`:`) and search (`/`, `?`).

When `nvim-lsp` and/or `luasnip` sources are available, you will not see
`cmp-buffer` and `cmp-path` items. To disable this, combine two tables in
the `sources` attribute in the |cmp.setup()| function together.
See:
- |cmp-config.sources|
- |cmp-config.sources[n].group_index|

char            action
----------------------------------------------------------------------

<C-n>           Select the next item
<C-j>           Select the next item
                |cmp.mapping.select_next_item|
<C-p>           Select the prev item
<C-k>           Select the prev item
                |cmp.mapping.select_prev_item|

<C-e>           Close the completion menu
                |cmp.mapping.abort()|
<C-Space>       Open the completion menu if it is not already open

<CR>            Confirm the selection.
                - `select = false`: If nothing is selected, close the
                  completion menu. Set true to choose the first item
                - `behavior = cmp.ConfirmBehavior.Replace`: controls
                  the behavior when completion is done adjacent to an
                  existing word. For example ("|" is the cursor):

>
                    |uire
                    ╭─────────────────────────────────╮
                    │ require(modname)  Function [LSP]│
                    │ req~           Snippet [LuaSnip]│

                    ... confirming the first item ...

                    require|
<

                  If `behavior = cmp.confirmBehavior.Insert`, it
                  would insert "requireuire"
                See |cmp.confirm|.

<Tab>           - When the completion menu is open:
                  select the next item
                - After selecting an expandable LuaSnip snippet
                  (e.g., function with multiple parameters):
                  jump to the next snippet items
                - Else:
                  sends <Tab> (i.e., inserts <Tab>)

<S-Tab>         - When the completion menu is open:
                  select the prev item
                - After selecting an expandable LuaSnip snippet
                  (e.g., function with multiple parameters):
                  jump to the prev snippet items
                - Else:
                  sends <S-Tab>


For more information:
- |nvim-cmp|: Completion plugin for LSP and snippet integration
- |cmp-cmdline-setup|: How to set the command line and search completion
- |ins-completion|: Default Vim completion library

================================================================================
UI Components                                                       *theovim-ui*

//TODO
For more information:
- |setting-tabline|: Guide on configuring Tabline
- |'statusline'|: 
- |'winbar'|: 

================================================================================
Documentation                                            *theovim-documentation*

This file (|theovim.txt|) 

- README.md: Outlines a brief overview for each Theovim module.
  It is more of a sales pitch than a serious documentation.
- CHANGELOG.md: 
- LICENSE.md

For more information:
- |help-writing|: Guide
- `:helptags .` to generate `helptags` for the files in the current directory


 vim:tw=78:ts=8:ft=help:norl:
