*theovim*                   Theo's Neovim Configuration

                                  \/       \/          ~
                                  /\_______/\          ~
                                 /   o   o   \         ~
                                (  ==  ^  ==  )        ~
                                 )           (         ~
                                (             )        ~
                                ( (  )   (  ) )        ~
                               (__(__)___(__)__)       ~
                              ___                      ~
                               | |_  _  _     o __     ~
                               | | |(/_(_)\_/ | |||    ~

================================================================================

Theovim //TODO
Welcome back Theo, what did you forget this time?

- Type |gO| to see the table of contents
- Use |K| (or |CTRL-]|) to jump to the tag under cursor, |CTRL-T| to comeback
- If you see a hyperlink, use |gx| to open it in your default browser

Credits:
The settings and keymaps for Telescope are heavily inspried by Kickstart.nvim
(https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua).
Kickstart is developed by TJ DeVries, the developer of Telescope,
and I trust their decisions. I will try to reflect changes in the mainstream
Kickstart repository.

- Kickstart.nvim
  (https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua)

// TODO: Something about `:checkhealth`

================================================================================
Core - Options                                            *theovim-core-options*

This portion //TODO

Tab defaults:
- 'tabstop' (how many char Vim renders <Tab> as) = 4
- 'softtabstop' (how many char the cursor moves in respect to <Tab>) = 0
  - 0 disables 'softtabstop'
- 'extandtab' (uses spaces instead of <Tab> when on) = true
- 'shiftwidth' (number of spaces used for indentation) = 2
- Read the below section for how <Tab> and indentation spaces are rendered

Character rendering:
>
  function example()
  ┊ ┊ str = "A line indented with four spaces"
  ⇥   str = "A line followed by <Tab> ('tabstop=4')"

  ┊ str = "A line followed by two trailing whitespaces"␣␣

  ┊ str = "Pretend that this line is really really really long and is wrap
    ↪ped. Notice how a wrapped line is also indented (`:h showbreak`)"

  ┊ str = "If you don't have 'showbreak' enabled, wrapped lines would look
  ↪ like this"
  end
<

Spell check:

- z=
- `:set spell!`

Fold:

For more information:
- |theovim-treesitter|

================================================================================
Core - User Commands                                     *theovim-core-commands*

:TrimWhitespace Shows
              dads
:ShowChanges
:CD

================================================================================
Core - Autocmds                                          *theovim-core-autocmds*

- Yank on highlight

================================================================================
Core - Keymaps                                        *theovim-core-keybindings*

Keybindings //TODO

================================================================================
Core - Netrw                                                *theovim-core-netrw*

Netrw is a built-in file manager for Vim and Neovim.
Netrw is intended to be used for visualizing file 

char            action
----------------------------------------------------------------------

<leader>n       Toggle Netrw by calling a custom toggle function.
                The function uses `vim.g.netrw_is_open` global variable,
                meaning if you enable Netrw through other mechanism,
                it will effectively break the keybinding.

For more information:
- |netrw|

================================================================================
Plugins                                                        *theovim-plugins*

This section //TODO

|tokyonight.nvim| is the default theme for Theovim.

Oil.nvim:

Whichkey

|gitsigns.nvim| provides Git signs in the gutter (+, -, ~, etc.) as well as
other useful Git functionalities.
Following keybinding is enabled for Git buffers:

char            action
----------------------------------------------------------------------

<leader>gd      [G]it [D]iff current buffer

MarkdownPreview:

Vimtex:

================================================================================
Telescope                                                    *theovim-telescope*

Telescope is a fuzzy finder for Neovim.
It allows you to find anything you want in just a few keystrokes.

Telescope works out of the box, but for faster search and live grep features,
following dependencies are needed:
- CMake, make, and GCC or Clang to compiler |telescope-fzf-native.nvim|
- ripgrep: https://github.com/BurntSushi/ripgrep
- fd: https://github.com/sharkdp/fd

char            action
----------------------------------------------------------------------

<leader>gf      Search [G]it [F]iles.
                Calls |telescope.builtin.find_files()|.

<leader>gc      [G]it [C]ommits.
                Calls |telescope.builtin.git_commits()|.

<leader>gs      [G]it [S]tatus.
                Calls |telescope.builtin.git_status()|.

<leader>?       Find recently opened files.
                Calls |telescope.builtin.oldfiles()|.

<leader><space> Find open buffers.
                Calls |telescope.builtin.buffers()|.

<leader>ss      [S]earch for [S]earch.
                Search all Telescope builtin functions.
                Calls |telescope.builtin.builtin()|.

<leader>ss      [S]earch [F]iles.
                Search files in the current and children directories.
                Respects .gitignore if one exists.
                `fd` is not required but recommended for faster search.
                Calls |telescope.builtin.find_files()|.

<leader>sg      [S]earch [G]rep.
                Search words in the current and children directories.
                Respects .gitignore if one exists.
                `ripgrep` is required for faster search.
                Calls |telescope.builtin.fd()|
                (alias for |telescope.builtin.find_files()|).

<leader>sb      [S]earch [B]rowser.
                Calls |telescope.file-browser.finders|


Within the Telescope window, following keybindings are available:

char            action
----------------------------------------------------------------------

<C-j>           Scroll down
<C-n>           Scroll down

<C-k>           Scroll up
<C-p>           Scroll up

<C-d>           Scroll down in the preview window
<C-u>           Scroll up in the preview window

<C-c>           Close Telescope window

<CR>            Confirm the selection


For more information:
- |telescope.nvim|: About the fuzzy finder itself
- |telescope.builtin|: Builtin modules of Telescope
- |telescope.file-browser.nvim|: File browser extension

================================================================================
Treesitter                                                  *theovim-treesitter*

Treesitter (TS) is an incremental parser generator for more accurate syntax
highlighting compared to the default regex-based highlighting.
TS also integrates with Vim's folding and selection mechanism to provide a
more efficient navigation and editing experience.

Theovim installs the following TS servers out of the box:

- Bash
- C
- C++
- LaTeX
- Lua
- Markdown
- Python

In these filetypes, TS highlight (|nvim-treesitter-highlight-mod|), incremental
selection (|nvim-treesitter-incremental-selection-mod|), and indentation
(|nvim-treesitter-indentation-mod|) will be enabled.

To disable TS or add other parsers, use the following frequently used commands
provided by the nvim-treesitter plugin:

- :TSInstall {language} ...
- :TSUpdate {language} ...
- :TSDisable {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|
- :TSToggle {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|

The following keybindings are provided when a TS parser is enabled:

char            action
----------------------------------------------------------------------

<C-space>       Start incremental selection
<C-space>       (in visual mode) Perform node incremental selection
<C-s>           (in visual mode) Perform scope incremental selection
<M-space>       (in visual mode) Perform node decremental selection

Incremental selection example:

>
  local function treesitter-incremental-example()
    local sysname = vim.loop.os_uname().sysname
    if sysname == "Linux" then
      vim.notify("You are using Linux!")
    else
      vim.notify("Ew")
    end
  end
<

- When you start node incremental selection at the "vim" keyword (<C-space>),
  it will incrementally select:
  - "vim" -> "vim.notify" -> "vim.notify(...)" -> if statement
    -> function body -> function
- When you start scope incremental selection at the "vim" keyword
  (<C-space> to initialize then <C-s>), it will incrementally select:
  - "vim" -> if statement -> function
- You should try it out with the language of your choice to see how it behaves

For more information:
- |nvim-treesitter|: Configuration and abstract layer for the built-in TS
- |treesitter|: Neovim built-in treesitter library

================================================================================
Diagnostic                                                  *theovim-diagnostic*

Neovim has a built-in diagnostic framework to display errors or warning
messages from external tools like LSP or linters.
Unless you configure an external tool, it will most likely be from LSP.

For example, here is how diagnostic float (<leader>e) displays errors for the
following diastrous Lua code.
>
  H  1 local function func()     ■■ Unused local `func`.
  I  2 ┊ lowercase = ""     ■ Global variable in lowercase initial, Did you
  W  3 ┊ undefined_func(syntax, err,)     ■■■■ Undefined global `err`.
     4 end
  ╭────────────────────────────────────────────────────────────────────────╮
  │Buffer Diagnostics                                                      │
  │1. ERROR (line 3): <exp> expected. [miss-exp]                           │
  │2. INFO (line 2): Global variable in lowercase initial, Did you miss `lo│
  │↪cal` or misspell it? [lowercase-global]                                │
  │3. HINT (line 1): Unused functions. [unused-function]                   │
  │4. HINT (line 1): Unused local `func`. [unused-local]                   │
  │5. WARN (line 3): Undefined global `undefined_func`. [undefined-global] │
  │6. WARN (line 3): Undefined global `syntax`. [undefined-global]         │
  ╰────────────────────────────────────────────────────────────────────────╯
<

The following keybindings are available for buffer with diagnostic information:

char            action
----------------------------------------------------------------------

[d              Go to the previous diagnostic message
]d              Go to the next diagnostic message
<leader>e       Open floating diagnostic message in the buffer scope.
                Calls |vim.diagnostic.open_float()|.
                Custom formatting defined in the `lsp.lua` is applied.
<leader>q       Open diagnostic list in |location-list|.
                Calls |vim.diagnostic.setloclist()|.

For more information: `:h diagnostic.txt`.

================================================================================
LSP                                                                *theovim-lsp*

Following LSP servers are installed by default:

- Bash (`bashls`)
- C/C++ (`clangd`)
- LaTeX (`texlab`)
- Lua (`lua_ls`)
- Python (`pylsp`)

When LSP server(s) is active in the buffer, it will be displayed in the
statusline:

>
   󰄛 N   nvim  doc/theovim.txt[+]  dev +60 ~2      HELP ...
<

When LSP server(s) is active in the buffer, following keybindings are available:

char            action
----------------------------------------------------------------------

K               Open hover doc //TODO


For more information:
- |mason.nvim|: LSP server manager
- |lspconfig|
- |lsp|: Built-in LSP framework

================================================================================
Completion                                                  *theovim-completion*

For more information:
- |nvim-cmp|: Completion plugin for LSP and snippet integration
- |ins-completion|: Default Vim completion library

================================================================================
UI Components                                                       *theovim-ui*

For more information:
- |setting-tabline|: Guide on configuring Tabline
- |'statusline'|: 
- |'winbar'|: 

================================================================================
Documentation                                            *theovim-documentation*

For more information:
- |help-writing|: Guide
- `:helptags .` to generate `helptags` for the files in the current directory


 vim:tw=78:ts=8:ft=help:norl:
