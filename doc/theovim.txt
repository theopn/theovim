*theovim*                   Theo's Neovim Configuration

                                  \/       \/          ~
                                  /\_______/\          ~
                                 /   o   o   \         ~
                                (  ==  ^  ==  )        ~
                                 )           (         ~
                                (             )        ~
                                ( (  )   (  ) )        ~
                               (__(__)___(__)__)       ~
                              ___                      ~
                               | |_  _  _     o __     ~
                               | | |(/_(_)\_/ | |||    ~

================================================================================

Theovim //TODO
Welcome back Theo, what did you forget this time?

- Type |gO| to see the table of contents
- Use |CTRL-]| to jump to the tag under cursor, |CTRL-T| to comeback

Credits:
The settings and keymaps for Telescope are heavily inspried by Kickstart.nvim
(https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua).
Kickstart is developed by TJ DeVries, the developer of Telescope,
and I trust their decisions. I will try to reflect changes in the mainstream
Kickstart repository.

- Kickstart.nvim
  (https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua)
- 

================================================================================
Core - Options                                            *theovim-core-options*

This portion //TODO

Tab defaults:
- 'tabstop' (how many char Vim renders <Tab> as) = 4
- 'softtabstop' (how many char the cursor moves in respect to <Tab>) = 0
  - 0 disables 'softtabstop'
- 'extandtab' (uses spaces instead of <Tab> when on) = true
- 'shiftwidth' (number of spaces used for indentation) = 2
- Read the below section for how <Tab> and indentation spaces are rendered

Character rendering:
>
  function example()
  ┊ ┊ str = "A line indented with four spaces"
  ⇥   str = "A line followed by <Tab> ('tabstop=4')"

  ┊ str = "A line followed by two trailing whitespaces"␣␣

  ┊ str = "Pretend that this line is really really really long and is wrap
    ↪ped. Notice how a wrapped line is also indented (`:h showbreak`)"

  ┊ str = "If you don't have 'showbreak' enabled, wrapped lines would look
  ↪ like this"
  end
<

Spell check:

Fold:

For more information:
- |theovim-treesitter|

================================================================================
Core - User Commands                                     *theovim-core-commands*

:TrimWhitespace Shows
              dads
:ShowChanges
:CD

================================================================================
Core - Autocmds                                          *theovim-core-autocmds*

- Yank on highlight

================================================================================
Core - Keymaps                                        *theovim-core-keybindings*

Keybindings //TODO

================================================================================
Core - Netrw                                                *theovim-core-netrw*

Netrw is a built-in file manager for Vim and Neovim.

char            action
----------------------------------------------------------------------
                                                          *<Leader>_n*
<leader>n       Toggle Netrw by calling  //TODO
                The function relies

For more information:
- |netrw|

================================================================================
Plugins                                                        *theovim-plugins*

This section //TODO

Tokyonight Transparency:

Oil.nvim:

Whichkey

Gitsigns.nvim:

MarkdownPreview:

Vimtex:

================================================================================
Telescope                                                    *theovim-telescope*

Telescope is a fuzzy finder for Neovim.
It allows you to find anything you want in just a few keystrokes.

char            action
----------------------------------------------------------------------

<Leader>gf      Search [G]it [F]iles.
                Calls |telescope.builtin.find_files()|.

<Leader>gc      [G]it [C]ommits.
                Calls |telescope.builtin.git_commits()|.

<Leader>gs      [G]it [S]tatus.
                Calls |telescope.builtin.git_status()|.

<Leader>?       Find recently opened files.
                Calls |telescope.builtin.oldfiles()|.

<Leader><space> Find open buffers.
                Calls |telescope.builtin.buffers()|.

<Leader>ss      [S]earch for [S]earch.
                Search all Telescope builtin functions.
                Calls |telescope.builtin.builtin()|.

<Leader>ss      [S]earch [F]iles.
                Search files in the current and children directories.
                Respects .gitignore if one exists.
                Calls |telescope.builtin.find_files()|.

<Leader>fb      [S]earch [B]rowser.
                Calls |telescope.file-browser.finders|


Within the Telescope window, following keybindings are available:

char            action
----------------------------------------------------------------------

<CTRL>j         Scroll down
<CTRL>n         Scroll down

<CTRL>k         Scroll up
<CTRL>p         Scroll up

<CTRL>d         Scroll down in the preview window
<CTRL>u         Scroll up in the preview window

<CTRL>c         Close Telescope window

<RET>           Confirm the selection


For more information:
- |telescope.nvim|: About the fuzzy finder itself
- |telescope.builtin|: Builtin modules of Telescope
- |telescope.file-browser.nvim|: File browser extension

================================================================================
Treesitter                                                  *theovim-treesitter*

Treesitter (TS) is an incremental parser generator for more accurate syntax
highlighting compared to the default regex-based highlighting.

Theovim installs following TS servers by default:

- C
- TODO

Following keybindings are provided when TS is 

char            action
----------------------------------------------------------------------
                                                           *<C-Space>*
K               Open hover doc //TODO

Below are frequently used commands provided by nvim-treesitter plugin:

- :TSInstall {language} ...
- :TSInstallInfo
- :TSUpdate {language} ...
- :TSDisable {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|
- :TSToggle {module} [{language}]
  - A list of modules can be found at |:TSModuleInfo|
  - A list of languages can be found at |:TSInstallInfo|
- :TSModuleInfo [{module}]

For more information:
- |nvim-treesitter|: Configuration and abstract layer
- |treesitter|: Neovim built-in treesitter library

================================================================================
Diagnostic                                                  *theovim-diagnostic*

For more information: `:h diagnostic.txt`.

================================================================================
LSP                                                                *theovim-lsp*

The settings and keymaps for LSP are heavily inspried by Kickstart.nvim
(https://github.com/nvim-lua/kickstart.nvim/blob/master/init.lua).
Kickstart is developed by TJ DeVries, one of the core maintainers for Neovim,
and I trust their decisions. I will try to reflect changes in the mainstream
Kickstart repository.

When LSP server(s) is active in the buffer, following keybindings are available:

char            action
----------------------------------------------------------------------
                                                                   *K*
K               Open hover doc //TODO


For more information:
- |lsp|: Built-in LSP framework

================================================================================
Completion                                                  *theovim-completion*

For more information:
- |nvim-cmp|: Completion plugin for LSP and snippet integration
- |ins-completion|: Default Vim completion library

================================================================================
UI Components                                                       *theovim-ui*

For more information:
- |setting-tabline|: Guide on configuring Tabline
- |'statusline'|: 
- |'winbar'|: 

================================================================================
Documentation                                            *theovim-documentation*

- `:h help-writing` 
- `:helptags .` to generate `helptags` for the files in the current directory


 vim:tw=78:ts=8:ft=help:norl:
